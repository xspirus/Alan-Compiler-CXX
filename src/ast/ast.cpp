/*******************************************************************************
 *                                                                             *
 *  Filename    : ast.cpp                                                      *
 *  Project     : Alan Compiler                                                *
 *  Version     : 1.0                                                          *
 *  Author      : Spiros Dontas                                                *
 *  Email       : spirosdontas@gmail.com                                       *
 *                                                                             *
 *  Description : Methods for Abstract Syntax Tree                             *
 *                                                                             *
 *******************************************************************************/

#include <ast/ast.hpp>

/*******************************************************************************
 *********************************** General ***********************************
 *******************************************************************************/

NodeAST::NodeAST() {
    this->line = linecount;
}

/*******************************************************************************
 ****************************** Integer Constants ******************************
 *******************************************************************************/

IntAST::IntAST(int val) : NodeAST() {
    this->type = typeInteger;
    this->val  = val;
}

/*******************************************************************************
 ******************************* Byte Constants ********************************
 *******************************************************************************/

ByteAST::ByteAST(unsigned char b) : NodeAST() {
    this->type = typeByte;
    this->b    = b;
}

/*******************************************************************************
 ******************************* String Literals *******************************
 *******************************************************************************/

StringAST::StringAST(std::string s) : NodeAST() {
    this->type = std::make_shared<TypeArray>(s.size() + 1, typeByte);
    this->s    = s;
}

/*******************************************************************************
 ********************************** Variables **********************************
 *******************************************************************************/

VarAST::VarAST(std::string id, ast index) : NodeAST() {
    this->id    = id;
    this->index = index;
}

/*******************************************************************************
 ****************************** Binary Operators *******************************
 *******************************************************************************/

BinOpAST::BinOpAST(char op, ast left, ast right) : NodeAST() {
    this->op    = op;
    this->type  = left->type;
    this->left  = left;
    this->right = right;
}

/*******************************************************************************
 ********************************* Conditions **********************************
 *******************************************************************************/

CondAST::CondAST(Cond op, ast left, ast right) : NodeAST() {
    this->type  = typeByte;
    this->op    = op;
    this->left  = left;
    this->right = right;
}

/*******************************************************************************
 *********************************** IfElse ************************************
 *******************************************************************************/

IfElseAST::IfElseAST(ast cond, ast ifBody, ast elseBody) : NodeAST() {
    this->cond     = cond;
    this->ifBody   = ifBody;
    this->elseBody = elseBody;
}

/*******************************************************************************
 ************************************ While ************************************
 *******************************************************************************/

WhileAST::WhileAST(ast cond, ast body) : NodeAST() {
    this->cond = cond;
    this->body = body;
}

/*******************************************************************************
 ******************************** Function Call ********************************
 *******************************************************************************/

CallAST::CallAST(std::string id, astVec params) : NodeAST() {
    this->id     = id;
    this->params = std::move(params);
}

/*******************************************************************************
 ****************************** Function Returns *******************************
 *******************************************************************************/

RetAST::RetAST(ast expr) : NodeAST() {
    this->type = expr->type;
    this->expr = expr;
}

/*******************************************************************************
 ********************************* Assignments *********************************
 *******************************************************************************/

AssignAST::AssignAST(ast left, ast right) : NodeAST() {
    this->type  = left->type;
    this->left  = left;
    this->right = right;
}

/*******************************************************************************
 **************************** Variable Declarations ****************************
 *******************************************************************************/

VarDeclAST::VarDeclAST(std::string id, TypePtr type) : NodeAST() {
    this->type = type;
    this->id   = id;
}

/*******************************************************************************
 ********************************* Parameters **********************************
 *******************************************************************************/

ParamAST::ParamAST(std::string id, PassMode mode, TypePtr type) : NodeAST() {
    this->type = type;
    this->id   = id;
    this->mode = mode;
}

/*******************************************************************************
 ********************************** Functions **********************************
 *******************************************************************************/

FuncAST::FuncAST(std::string id, astVec params, TypePtr type, astVec decls, ast body) : NodeAST() {
    this->type   = type;
    this->id     = id;
    this->params = std::move(params);
    this->decls  = std::move(decls);
    this->body   = body;
}

/*******************************************************************************
 ***************************** Compound Statements *****************************
 *******************************************************************************/

BlockAST::BlockAST(astVec stmts) : NodeAST() {
    this->stmts = std::move(stmts);
}
