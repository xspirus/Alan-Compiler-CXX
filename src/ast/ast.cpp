/*******************************************************************************
 *                                                                             *
 *  Filename    : ast.cpp                                                      *
 *  Project     : Alan Compiler                                                *
 *  Version     : 1.0                                                          *
 *  Author      : Spiros Dontas                                                *
 *  Email       : spirosdontas@gmail.com                                       *
 *                                                                             *
 *  Description : Methods for Abstract Syntax Tree                             *
 *                                                                             *
 *******************************************************************************/

#include <ast/ast.hpp>

namespace ast {

/*******************************************************************************
 *********************************** General ***********************************
 *******************************************************************************/

Node::Node() {
    this->line = linecount;
}

/*******************************************************************************
 ****************************** Integer Constants ******************************
 *******************************************************************************/

Int::Int(int val) : Node() {
    this->type = sem::typeInteger;
    this->val  = val;
}

/*******************************************************************************
 ******************************* Byte Constants ********************************
 *******************************************************************************/

Byte::Byte(unsigned char b) : Node() {
    this->type = sem::typeByte;
    this->b    = b;
}

/*******************************************************************************
 ******************************* String Literals *******************************
 *******************************************************************************/

String::String(std::string s) : Node() {
    this->type = std::make_shared<sem::TypeArray>(s.size() + 1, sem::typeByte);
    this->s    = s;
}

/*******************************************************************************
 ********************************** Variables **********************************
 *******************************************************************************/

Var::Var(std::string id, astPtr index) : Node() {
    this->id    = id;
    this->index = index;
}

/*******************************************************************************
 ****************************** Binary Operators *******************************
 *******************************************************************************/

BinOp::BinOp(char op, astPtr left, astPtr right) : Node() {
    this->op    = op;
    this->type  = left->type;
    this->left  = left;
    this->right = right;
}

/*******************************************************************************
 ********************************* Conditions **********************************
 *******************************************************************************/

Condition::Condition(Cond op, astPtr left, astPtr right) : Node() {
    this->type  = sem::typeByte;
    this->op    = op;
    this->left  = left;
    this->right = right;
}

/*******************************************************************************
 *********************************** IfElse ************************************
 *******************************************************************************/

IfElse::IfElse(astPtr cond, astPtr ifBody, astPtr elseBody) : Node() {
    this->cond     = cond;
    this->ifBody   = ifBody;
    this->elseBody = elseBody;
}

/*******************************************************************************
 ************************************ While ************************************
 *******************************************************************************/

While::While(astPtr cond, astPtr body) : Node() {
    this->cond = cond;
    this->body = body;
}

/*******************************************************************************
 ******************************** Function Call ********************************
 *******************************************************************************/

Call::Call(std::string id, astVec params) : Node() {
    this->id     = id;
    this->params = std::move(params);
}

/*******************************************************************************
 ****************************** Function Returns *******************************
 *******************************************************************************/

Ret::Ret(astPtr expr) : Node() {
    this->type = expr->type;
    this->expr = expr;
}

/*******************************************************************************
 ********************************* Assignments *********************************
 *******************************************************************************/

Assign::Assign(astPtr left, astPtr right) : Node() {
    this->type  = left->type;
    this->left  = left;
    this->right = right;
}

/*******************************************************************************
 **************************** Variable Declarations ****************************
 *******************************************************************************/

VarDecl::VarDecl(std::string id, sem::TypePtr type) : Node() {
    this->type = type;
    this->id   = id;
}

/*******************************************************************************
 ********************************* Parameters **********************************
 *******************************************************************************/

Param::Param(std::string id, sem::PassMode mode, sem::TypePtr type) : Node() {
    this->type = type;
    this->id   = id;
    this->mode = mode;
}

/*******************************************************************************
 ********************************** Functions **********************************
 *******************************************************************************/

Func::Func(std::string id, astVec params, sem::TypePtr type, astVec decls, astPtr body) : Node() {
    this->type   = type;
    this->id     = id;
    this->params = std::move(params);
    this->decls  = std::move(decls);
    this->body   = body;
}

/*******************************************************************************
 ***************************** Compound Statements *****************************
 *******************************************************************************/

Block::Block(astVec stmts) : Node() {
    this->stmts = std::move(stmts);
}

} // end namespace ast
